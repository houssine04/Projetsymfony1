<?php

namespace OC\PlateformBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{

    public function getAdverts($page, $nbPerPage){

        $query = $this->createQueryBuilder('a')
            // Jointure sur l'attribut image
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            // Jointure sur l'attribut categories
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            // ordre
            ->orderBy('a.date', 'DESC')
            ->getQuery();

        // Pagination
        $query->setFirstResult(($page-1) * $nbPerPage)
              ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        return new Paginator($query, true);
    }

    public function myFindOne($id){

        return $this->createQueryBuilder('a')
                    ->where('a.id = :id')->setParameter('id', $id)
                    ->getQuery()->getSingleResult();
    }

    public function findByAuthorAndDate($author, $year)
    {
        return $this->createQueryBuilder('a')
            ->where('a.author = :author')
            ->setParameter('author', $author)
            ->andWhere('a.date < :year')
            ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC')
            ->getQuery()
            ->getResult();
    }

    // Jointure
    public function getAdvertWithApplications()
    {
        return $this->createQueryBuilder('a')
                    ->leftJoin('a.applications', 'app')
                    ->addSelect('app')
                    ->getQuery()
                    ->getResult();
    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb ->innerJoin('a.categories', 'c')
            ->addSelect('c');

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb->getQuery()->getResult();
    }

}
